name: Rollback Production

on:
  workflow_dispatch:
    inputs:
      target_release:
        description: 'Target release to rollback to (leave empty for previous release)'
        required: false
        default: ''
      reason:
        description: 'Reason for rollback'
        required: true
        default: 'Emergency rollback'

jobs:
  validate-rollback:
    name: Validate Rollback Request
    runs-on: ubuntu-latest
    environment: production
    outputs:
      target_release: ${{ steps.determine_target.outputs.target_release }}

    steps:
      - name: Validate inputs
        run: |
          echo "Rollback reason: ${{ github.event.inputs.reason }}"
          echo "Target release: ${{ github.event.inputs.target_release || 'Previous release' }}"

      - name: Get available releases from server
        id: determine_target
        uses: appleboy/ssh-action@v1.0.3
        with:
          host: ${{ secrets.PRODUCTION_HOST }}
          username: ${{ secrets.PRODUCTION_USERNAME }}
          key: ${{ secrets.PRODUCTION_SSH_KEY }}
          port: ${{ secrets.PRODUCTION_PORT }}
          script: |
            cd ${{ secrets.PRODUCTION_PATH }}/releases

            # Get current release
            CURRENT_RELEASE=$(readlink ../current | sed 's|releases/||')
            echo "Current release: $CURRENT_RELEASE"

            # Get target release
            if [ -n "${{ github.event.inputs.target_release }}" ]; then
              TARGET_RELEASE="${{ github.event.inputs.target_release }}"
              if [ ! -d "$TARGET_RELEASE" ]; then
                echo "Error: Target release $TARGET_RELEASE not found"
                exit 1
              fi
            else
              # Get previous release (second most recent)
              TARGET_RELEASE=$(ls -t | grep -v "$CURRENT_RELEASE" | head -1)
              if [ -z "$TARGET_RELEASE" ]; then
                echo "Error: No previous release found"
                exit 1
              fi
            fi

            echo "target_release=$TARGET_RELEASE" >> $GITHUB_OUTPUT
            echo "Target release determined: $TARGET_RELEASE"

  backup-current:
    name: Backup Current State
    runs-on: ubuntu-latest
    needs: validate-rollback
    environment: production

    steps:
      - name: Create pre-rollback backup
        uses: appleboy/ssh-action@v1.0.3
        with:
          host: ${{ secrets.PRODUCTION_HOST }}
          username: ${{ secrets.PRODUCTION_USERNAME }}
          key: ${{ secrets.PRODUCTION_SSH_KEY }}
          port: ${{ secrets.PRODUCTION_PORT }}
          script: |
            cd ${{ secrets.PRODUCTION_PATH }}/current

            # Create database backup
            echo "Creating pre-rollback database backup..."
            php artisan backup:run --only-db

            # Create application state backup
            BACKUP_NAME="pre-rollback-$(date +%Y%m%d-%H%M%S)"
            mkdir -p ../backups/$BACKUP_NAME

            # Backup current configs
            cp .env ../backups/$BACKUP_NAME/
            cp -r storage/logs ../backups/$BACKUP_NAME/

            echo "Backup created: $BACKUP_NAME"

  rollback:
    name: Execute Rollback
    runs-on: ubuntu-latest
    needs: [validate-rollback, backup-current]
    environment: production

    steps:
      - name: Execute rollback
        uses: appleboy/ssh-action@v1.0.3
        with:
          host: ${{ secrets.PRODUCTION_HOST }}
          username: ${{ secrets.PRODUCTION_USERNAME }}
          key: ${{ secrets.PRODUCTION_SSH_KEY }}
          port: ${{ secrets.PRODUCTION_PORT }}
          script: |
            cd ${{ secrets.PRODUCTION_PATH }}

            TARGET_RELEASE="${{ needs.validate-rollback.outputs.target_release }}"
            CURRENT_RELEASE=$(readlink current | sed 's|releases/||')

            echo "Rolling back from $CURRENT_RELEASE to $TARGET_RELEASE"

            # Enable maintenance mode
            cd current
            php artisan down --retry=60 --secret="rollback-in-progress"

            # Switch to target release
            cd ..
            ln -nfs releases/$TARGET_RELEASE current
            cd current

            # Ensure environment file exists
            if [ ! -f .env ]; then
              cp .env.production .env
            fi

            # Run any necessary rollback migrations (if needed)
            # php artisan migrate:rollback --step=X --force

            # Clear caches
            php artisan cache:clear
            php artisan config:clear
            php artisan route:clear
            php artisan view:clear

            # Regenerate caches
            php artisan config:cache
            php artisan route:cache
            php artisan view:cache

            # Restart queue workers
            sudo supervisorctl restart laravel-worker:*

            # Disable maintenance mode
            php artisan up

            # Restart web server
            sudo service nginx restart

            echo "Rollback completed successfully"

  verify-rollback:
    name: Verify Rollback
    runs-on: ubuntu-latest
    needs: rollback

    steps:
      - name: Health check after rollback
        run: |
          echo "Waiting for application to start..."
          sleep 60

          for i in {1..10}; do
            if curl -f ${{ secrets.PRODUCTION_URL }}/health; then
              echo "Health check passed after rollback"
              exit 0
            fi
            echo "Health check attempt $i failed, retrying..."
            sleep 15
          done
          echo "Health check failed after rollback"
          exit 1

      - name: Get application version
        uses: appleboy/ssh-action@v1.0.3
        with:
          host: ${{ secrets.PRODUCTION_HOST }}
          username: ${{ secrets.PRODUCTION_USERNAME }}
          key: ${{ secrets.PRODUCTION_SSH_KEY }}
          port: ${{ secrets.PRODUCTION_PORT }}
          script: |
            cd ${{ secrets.PRODUCTION_PATH }}/current
            echo "Current release: $(readlink ../current | sed 's|releases/||')"

            # Check Laravel version if available
            if [ -f artisan ]; then
              php artisan --version
            fi

  notify-rollback:
    name: Notify Rollback Status
    runs-on: ubuntu-latest
    needs: [validate-rollback, rollback, verify-rollback]
    if: always()

    steps:
      - name: Notify rollback completion
        uses: slackapi/slack-github-action@v2.1.1
        with:
          webhook: ${{ secrets.SLACK_WEBHOOK_URL }}
          webhook-type: incoming-webhook
          payload: |
            text: |
              ðŸ”„ Production Rollback ${{ job.status }}

              **Target Release**: ${{ needs.validate-rollback.outputs.target_release }}
              **Reason**: ${{ github.event.inputs.reason }}
              **Triggered by**: ${{ github.actor }}
              **Time**: ${{ github.event.created_at }}
            blocks:
              - type: "section"
                text:
                  type: "mrkdwn"
                  text: |
                    ðŸ”„ Production Rollback ${{ job.status }}

                    **Target Release**: ${{ needs.validate-rollback.outputs.target_release }}
                    **Reason**: ${{ github.event.inputs.reason }}
                    **Triggered by**: ${{ github.actor }}
                    **Time**: ${{ github.event.created_at }}
